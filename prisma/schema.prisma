generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  unaccent        = true
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp"), unaccent]
}

model file {
  id   String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  path String @db.VarChar

  user     user[]
  stories  story[]
  stickers sticker[]
}

model gender {
  id   Int    @id
  name String @db.VarChar
  user user[]
}

model humanBookTopic {
  userId  Int
  topicId Int
  topic   topics @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_topics")
  user    user   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([userId, topicId])
}

model liberTopicOfInterest {
  userId  Int
  topicId Int
  topic   topics @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_topics")
  user    user   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([userId, topicId])
}

model humanBooks {
  id             Int       @id @default(autoincrement())
  userId         Int
  bio            String?   @db.VarChar
  videoUrl       String?   @db.VarChar
  education      String?   @db.VarChar
  educationStart DateTime? @db.Date
  educationEnd   DateTime? @db.Date
  createdAt      DateTime  @default(now()) @db.Timestamp(6)
  updatedAt      DateTime  @default(now()) @db.Timestamp(6)
  user           user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_human_books_user")
}

model role {
  id   Int    @id
  name String @db.VarChar
  user user[]
}

model session {
  id        Int       @id @default(autoincrement())
  hash      String    @db.VarChar
  createdAt DateTime  @default(now()) @db.Time(6)
  updatedAt DateTime  @default(now()) @db.Time(6)
  deletedAt DateTime? @db.Time(6)
  userId    Int?
}

model status {
  id   Int    @id
  name String @db.VarChar

  // Optional back relation
  user     user[]
  stickers sticker[]
}

model topics {
  id        Int                    @id @default(autoincrement())
  name      String                 @unique @db.VarChar
  createdAt DateTime               @default(now()) @db.Timestamp(6)
  updatedAt DateTime               @default(now()) @db.Timestamp(6)
  hubers    humanBookTopic[]
  libers    liberTopicOfInterest[]
  stories   storyTopic[]
}

model user {
  id                    Int                    @id @default(autoincrement())
  email                 String?                @db.VarChar
  password              String?                @db.VarChar
  provider              String                 @default("email") @db.VarChar
  socialId              String?                @db.VarChar
  fullName              String?                @db.VarChar
  birthday              String?                @db.VarChar
  createdAt             DateTime               @default(now()) @db.Time(6)
  updatedAt             DateTime               @default(now()) @db.Time(6)
  deletedAt             DateTime?              @db.Time(6)
  genderId              Int?
  roleId                Int?
  statusId              Int?
  approval              String?                @db.VarChar
  photoId               String?                @db.Uuid
  address               String?                @db.VarChar
  parentPhoneNumber     String?                @db.VarChar
  phoneNumber           String?                @db.VarChar
  bio                   String?                @db.VarChar
  videoUrl              String?                @db.VarChar
  education             String?                @db.VarChar
  educationStart        DateTime?              @db.Date
  educationEnd          DateTime?              @db.Date
  humanBookTopic        humanBookTopic[]
  topicsOfInterest      liberTopicOfInterest[]
  humanBooks            humanBooks[]
  storyReview           storyReview[]
  stories               story[]
  storyFavorite         storyFavorite[]
  notificationsReceived notification[]         @relation("RecipientNotification")
  notificationsSent     notification[]         @relation("SenderNotification")
  chatsSent             chat[]                 @relation("ChatSender")
  chatsReceived         chat[]                 @relation("ChatRecipient")

  huberReadingSessions readingSession[] @relation("HumanBookRelation")

  timeSlots timeSlot[]
  gender    gender?    @relation(fields: [genderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  file      file?      @relation(fields: [photoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role      role?      @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status    status?    @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  messagesAsHumanBook message[] @relation("HumanBookRelation")
  messagesAsReader    message[] @relation("ReaderRelation")

  readingSession readingSession[] @relation(name: "ReaderRelation")
  feedbackBys    feedback[]       @relation(name: "UserFeedbackBy")
  feedbackTos    feedback[]       @relation(name: "UserFeedbackTo")

  reportsGiven    report[] @relation("UserReports")
  reportsReceived report[] @relation("UserReported")
}

model story {
  id            Int             @id @default(autoincrement())
  title         String          @db.VarChar
  abstract      String?         @db.VarChar
  coverId       String?         @db.Uuid
  humanBookId   Int
  publishStatus Int             @default(1)
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @db.Timestamp(6)
  cover         file?           @relation(fields: [coverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  humanBook     user            @relation(fields: [humanBookId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  storyFavorite storyFavorite[]
  storyReview   storyReview[]
  topics        storyTopic[]

  readingSession  readingSession[]
  rejectionReason String?
}

model storyTopic {
  storyId Int
  topicId Int
  story   story  @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topic   topics @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([storyId, topicId])
}

model storyReview {
  id        Int      @id @default(autoincrement())
  rating    Int
  title     String   @db.VarChar
  comment   String   @db.VarChar
  preRating Int?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  userId    Int
  storyId   Int
  story     story    @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_story_review_user")
}

model storyFavorite {
  userId    Int
  storyId   Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)

  user  user  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  story story @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, storyId])
}

model timeSlot {
  id        Int      @id @default(autoincrement())
  huberId   Int
  dayOfWeek Int
  startTime String   @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  huber     user?    @relation(fields: [huberId], references: [id])
}

enum ReadingSessionStatus {
  finished
  canceled
  pending
  rejected
  approved
  unInitialized
  missed
}

model readingSession {
  id Int @id @default(autoincrement())

  humanBookId Int
  humanBook   user @relation(name: "HumanBookRelation", fields: [humanBookId], references: [id], onDelete: Cascade)

  readerId Int
  reader   user @relation(name: "ReaderRelation", fields: [readerId], references: [id], onDelete: Cascade)

  storyId Int
  story   story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  note          String?              @db.VarChar(4000) // Mentee requests for session (if yes)
  preRating     Int                  @default(0)
  rating        Int                  @default(0)
  sessionUrl    String               @db.VarChar(1000) // Meeting URL
  recordingUrl  String?              @db.VarChar(500) // Meeting recording URL
  sessionStatus ReadingSessionStatus @default(pending)

  startedAt DateTime @default(now()) @db.Timestamp(6)
  startTime String   @db.VarChar(40)
  endedAt   DateTime @db.Timestamp(6)
  endTime   String   @db.VarChar(40)

  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime?

  rejectReason String?
  // feedbacks feedback[] @relation("ReadingSessionFeedback")
  messages     message[] @relation("ReadingSessionMessage")
  // feedback  feedback[]
}

model feedback {
  id Int @id @default(autoincrement())

  feedbackById Int?
  feedbackBy   user? @relation(name: "UserFeedbackBy", fields: [feedbackById], references: [id], onDelete: Cascade)

  feedbackToId Int?
  feedbackTo   user? @relation(name: "UserFeedbackTo", fields: [feedbackToId], references: [id], onDelete: Cascade)

  rating    Float
  preRating Int?
  content   String?   @db.VarChar(4000)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime?
}

model message {
  id Int @id @default(autoincrement())

  readingSessionId Int
  readingSession   readingSession @relation(name: "ReadingSessionMessage", fields: [readingSessionId], references: [id], onDelete: Cascade)

  humanBookId Int
  humanBook   user @relation(name: "HumanBookRelation", fields: [humanBookId], references: [id], onDelete: Cascade)

  readerId Int
  reader   user @relation(name: "ReaderRelation", fields: [readerId], references: [id], onDelete: Cascade)

  content   String    @db.VarChar(4000)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime?
}

model notification {
  id              Int              @id @default(autoincrement())
  recipientId     Int
  recipient       user             @relation("RecipientNotification", fields: [recipientId], references: [id])
  senderId        Int
  sender          user             @relation("SenderNotification", fields: [senderId], references: [id])
  typeId          Int
  type            notificationType @relation(fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  seen            Boolean          @default(false)
  relatedEntityId Int?
  extraNote       String?
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @default(now()) @db.Timestamp(6)
  deletedAt       DateTime?
}

model notificationType {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar
  notification notification[]
}

model chatType {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar
  chat chat[]
}

model sticker {
  id       Int     @id @default(autoincrement())
  name     String
  imageId  String? @db.Uuid
  category String?
  statusId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image  file?   @relation(fields: [imageId], references: [id])
  status status? @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Optional back relation
  chat chat[]
}

model chat {
  id Int @id @default(autoincrement())

  senderId    Int
  recipientId Int
  message     String?    @db.VarChar(4000)
  status      chatStatus @default(sent)
  chatTypeId  Int?       @default(1)
  stickerId   Int?

  sticker   sticker?  @relation(fields: [stickerId], references: [id])
  sender    user      @relation("ChatSender", fields: [senderId], references: [id])
  recipient user      @relation("ChatRecipient", fields: [recipientId], references: [id])
  chatType  chatType? @relation(fields: [chatTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  readAt    DateTime?
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime?

  @@index([recipientId, readAt])
}

model report {
  id             Int      @id @default(autoincrement())
  reason         String
  markAsResolved Boolean  @default(false)
  createdAt      DateTime @default(now()) @db.Timestamp(6)

  reporterId     Int
  reportedUserId Int

  reporter     user @relation("UserReports", fields: [reporterId], references: [id])
  reportedUser user @relation("UserReported", fields: [reportedUserId], references: [id])

  @@unique([reporterId, reportedUserId])
}

enum chatStatus {
  sent
  delivered
  read
  deleted
}
